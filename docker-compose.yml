version: '3.8'

services:
  # YouTube Comment Intelligence API
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: youtube-comment-intelligence-api
    ports:
      - "8080:8080"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=False
      - LOG_LEVEL=INFO
    env_file:
      - .env
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
    networks:
      - youtube-intelligence
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # YouTube Comment Intelligence Web UI
  web:
    build:
      context: .
      dockerfile: Dockerfile.streamlit
    container_name: youtube-comment-intelligence-web
    ports:
      - "8501:8501"
    environment:
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
    env_file:
      - .env
    volumes:
      - ./models:/app/models:ro
      - ./assets:/app/assets
    networks:
      - youtube-intelligence
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: youtube-comment-intelligence-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - youtube-intelligence
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for data persistence
  postgres:
    image: postgres:15-alpine
    container_name: youtube-comment-intelligence-db
    environment:
      POSTGRES_DB: youtube_intelligence
      POSTGRES_USER: youtube_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-youtube_pass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - youtube-intelligence
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U youtube_user -d youtube_intelligence"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: youtube-comment-intelligence-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - youtube-intelligence
    depends_on:
      - api
      - web
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: youtube-comment-intelligence-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - youtube-intelligence
    restart: unless-stopped

  # Grafana for monitoring dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: youtube-comment-intelligence-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - youtube-intelligence
    depends_on:
      - prometheus
    restart: unless-stopped

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: youtube-comment-intelligence-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - youtube-intelligence
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: youtube-comment-intelligence-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - youtube-intelligence
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Filebeat for log shipping
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.8.0
    container_name: youtube-comment-intelligence-filebeat
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/youtube-intelligence:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - youtube-intelligence
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: youtube-comment-intelligence-celery-worker
    command: celery -A app.celery worker --loglevel=info
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    env_file:
      - .env
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
    networks:
      - youtube-intelligence
    depends_on:
      - redis
      - postgres
    restart: unless-stopped

  # Celery beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: youtube-comment-intelligence-celery-beat
    command: celery -A app.celery beat --loglevel=info
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs
    networks:
      - youtube-intelligence
    depends_on:
      - redis
    restart: unless-stopped

  # Flower for Celery monitoring
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: youtube-comment-intelligence-flower
    command: celery -A app.celery flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "5555:5555"
    networks:
      - youtube-intelligence
    depends_on:
      - redis
      - celery-worker
    restart: unless-stopped

volumes:
  redis_data:
  postgres_data:
  nginx_logs:
  prometheus_data:
  grafana_data:
  elasticsearch_data:

networks:
  youtube-intelligence:
    driver: bridge